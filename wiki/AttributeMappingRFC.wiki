#labels Phase-Requirements,Phase-Design
= Attributes Mapping Examples =

Let's say that there isn't ANY kind of file mapping.
By convention:
The classe is mapped for a table of same name without *"T"* prefix.
Each property is mapped for a column with same name. The property types will be mapped for compatible database types, default sizes and scales.
The first property with name *Id* property will be considered the table's primary key.
Lets I want to use the default mapping behaviour for my TPerson class:

{{{
[Entity]
TPerson = class
public
  property id: integer;
  property Name: String...
  property Address: String...
  property Age: Integer...
end;
}}}

This class is intended to be mapped to the following table:
||TABLE NAME||PERSON||
||Columns||Type/Size/PK||
||ID||INTEGER (PK)||
||NAME||VARCHAR with default size||
||ADDRESS||VARCHAR with default size||
||AGE ||NUMBER||
---
If we have a primary key column with different name we can map:
{{{
  [Id]
  property Identifier: integer;
}}}
And if is necessary use a different generator class strategy of default to used database, we can map:
{{{
  [Id('dorm.adapter.Firebird.TFirebirdTableSequence')]
  property Id: integer;
}}}
---
Let's say we want to use a different table name to same classe. we can map:
{{{
[Entity('PEOPLE')]
TPerson = class
public
  property id: integer;
  property Name: String...
  property Address: String...
  property Age: Integer...
end;
}}}

The above mapping is analogue to first sample but persist to *PEOPLE* table. Look the following table:
||TABLE NAME||PEOPLE||
||Columns||Type/Size/PK||
||ID||INTEGER (PK)||
||NAME||VARCHAR with default size||
||ADDRESS||VARCHAR with default size||
||AGE ||NUMBER||
---
Let's say I want to use also a different field name and a specific size for the attribute "Name":
{{{
[Entity('PEOPLE')]
TPerson = class
public
  property id: integer;
  [Column('FULL_NAME', 60)]
  property Name: String...
  property Address: String...
  property Age: Integer...
end;
}}}

This class i intended to be mapped to the following table:
||TABLE NAME||PEOPLE||
||Columns||Type/Size/PK||
||ID||INTEGER (PK)||
||FULL_NAME||VARCHAR(60)||
||ADDRESS||VARCHAR with default siz)||
||AGE ||NUMBER||
---
Now I want to define a new "IsAdult" transient (when corresponding field not exists on database) property:
{{{
[Entity('PEOPLE')]
TPerson = class
public
  property id: integer;
  [Column('FULL_NAME', 60)]
  property Name: String...
  property Address: String...
  property Age: Integer...
  [Transient]
  property IsAdult read GetIsAdult;
end;
}}}
---
Now I want to define a new has_many relation with class "TPhone":
{{{
[dorm]
[dorm_table('PEOPLE')]
TPerson = class
public
  property id: integer;
  [dorm_field('FULL_NAME', 60)]
  property Name: String...
  property Address: String...
  property Age: Integer...
  [dorm_transient_field]
  property IsAdult read GetIsAdult;
  [dorm_has_many(TPhone)]
  property Phones: TObjectList<TPhone>...
end;

[dorm]
[dorm_table('PHONES')]
TPhone = class
protected
  property PersonOID: integer...
public
  property id: integer...
  property Number: String...
end;
}}}

All the relations table fields in this example are defined "by convention":
||TABLE NAME||PEOPLE||
||PKFIELD||ID (INTEGER)||
||FIELD1||FULL_NAME(VARCHAR(60))||
||FIELD2||ADDRESS(VARCHAR with default size)||
||FIELD3||AGE (NUMBER)||

||TABLE NAME||PHONES||
||PKFIELD||ID (INTEGER)||
||FIELD1||NUMBER(VARCHAR with default size)||
||FIELD2||PERSON_OID(INTEGER)||

Now I want to define a SPECIFIC fields for the has_many relation with class "TPhone":
{{{
[dorm]
[dorm_table('PEOPLE')]
TPerson = class
public
  property id: integer;
  [dorm_field('FULL_NAME', 60)]
  property Name: String...
  property Address: String...
  property Age: Integer...
  [dorm_transient_field]
  property IsAdult read GetIsAdult;
  [dorm_has_many(TPhone, 'OwnerID')]
  property Phones: TObjectList<TPhone>...
end;

[dorm]
[dorm_table('PHONES')]
TPhone = class
protected
  [dorm_field('PARENT_PERSON_ID')]
  property OwnerID: integer...
public
  property id: integer...
  property Number: String...
end;
}}}

All the relations table fields in this example are defined with attributes:
||TABLE NAME||PEOPLE||
||PKFIELD||ID (INTEGER)||
||FIELD1||FULL_NAME(VARCHAR(60))||
||FIELD2||ADDRESS(VARCHAR with default size)||
||FIELD3||AGE (NUMBER)||

||TABLE NAME||PHONES||
||PKFIELD||ID (INTEGER)||
||FIELD1||NUMBER(VARCHAR with default size)||
||FIELD2||PARENT_PERSON_ID(INTEGER)||


Please, add other mapping examples here... we've to share the ideas about the attributes mapping.